// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// AnyCharMatch
int AnyCharMatch(CharacterVector x, CharacterVector a, bool opposite);
RcppExport SEXP _hutilscpp_AnyCharMatch(SEXP xSEXP, SEXP aSEXP, SEXP oppositeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type opposite(oppositeSEXP);
    rcpp_result_gen = Rcpp::wrap(AnyCharMatch(x, a, opposite));
    return rcpp_result_gen;
END_RCPP
}
// AnyWhich_dbl
R_xlen_t AnyWhich_dbl(DoubleVector x, double a, bool gt, bool lt, bool eq, bool rev);
RcppExport SEXP _hutilscpp_AnyWhich_dbl(SEXP xSEXP, SEXP aSEXP, SEXP gtSEXP, SEXP ltSEXP, SEXP eqSEXP, SEXP revSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type gt(gtSEXP);
    Rcpp::traits::input_parameter< bool >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< bool >::type eq(eqSEXP);
    Rcpp::traits::input_parameter< bool >::type rev(revSEXP);
    rcpp_result_gen = Rcpp::wrap(AnyWhich_dbl(x, a, gt, lt, eq, rev));
    return rcpp_result_gen;
END_RCPP
}
// AnyWhich_int
R_xlen_t AnyWhich_int(IntegerVector x, int a, bool gt, bool lt, bool eq, bool rev);
RcppExport SEXP _hutilscpp_AnyWhich_int(SEXP xSEXP, SEXP aSEXP, SEXP gtSEXP, SEXP ltSEXP, SEXP eqSEXP, SEXP revSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type gt(gtSEXP);
    Rcpp::traits::input_parameter< bool >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< bool >::type eq(eqSEXP);
    Rcpp::traits::input_parameter< bool >::type rev(revSEXP);
    rcpp_result_gen = Rcpp::wrap(AnyWhich_int(x, a, gt, lt, eq, rev));
    return rcpp_result_gen;
END_RCPP
}
// AnyWhichInDbl
int AnyWhichInDbl(DoubleVector x, DoubleVector Table);
RcppExport SEXP _hutilscpp_AnyWhichInDbl(SEXP xSEXP, SEXP TableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type Table(TableSEXP);
    rcpp_result_gen = Rcpp::wrap(AnyWhichInDbl(x, Table));
    return rcpp_result_gen;
END_RCPP
}
// AnyWhichInInt
int AnyWhichInInt(IntegerVector x, IntegerVector Table);
RcppExport SEXP _hutilscpp_AnyWhichInInt(SEXP xSEXP, SEXP TableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Table(TableSEXP);
    rcpp_result_gen = Rcpp::wrap(AnyWhichInInt(x, Table));
    return rcpp_result_gen;
END_RCPP
}
// Implies
LogicalVector Implies(LogicalVector x, LogicalVector y, bool anyNAx, bool anyNAy);
RcppExport SEXP _hutilscpp_Implies(SEXP xSEXP, SEXP ySEXP, SEXP anyNAxSEXP, SEXP anyNAySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAx(anyNAxSEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAy(anyNAySEXP);
    rcpp_result_gen = Rcpp::wrap(Implies(x, y, anyNAx, anyNAy));
    return rcpp_result_gen;
END_RCPP
}
// anyOutside_int
int anyOutside_int(IntegerVector x, int a, int b, bool nas_present, bool na_is_outside);
RcppExport SEXP _hutilscpp_anyOutside_int(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nas_presentSEXP, SEXP na_is_outsideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type nas_present(nas_presentSEXP);
    Rcpp::traits::input_parameter< bool >::type na_is_outside(na_is_outsideSEXP);
    rcpp_result_gen = Rcpp::wrap(anyOutside_int(x, a, b, nas_present, na_is_outside));
    return rcpp_result_gen;
END_RCPP
}
// anyOutside_dbl
int anyOutside_dbl(DoubleVector x, double a, double b, bool nas_present, bool na_is_outside);
RcppExport SEXP _hutilscpp_anyOutside_dbl(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nas_presentSEXP, SEXP na_is_outsideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type nas_present(nas_presentSEXP);
    Rcpp::traits::input_parameter< bool >::type na_is_outside(na_is_outsideSEXP);
    rcpp_result_gen = Rcpp::wrap(anyOutside_dbl(x, a, b, nas_present, na_is_outside));
    return rcpp_result_gen;
END_RCPP
}
// do_range_dbl
DoubleVector do_range_dbl(NumericVector x, double halt_if_min, double halt_if_max);
RcppExport SEXP _hutilscpp_do_range_dbl(SEXP xSEXP, SEXP halt_if_minSEXP, SEXP halt_if_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type halt_if_min(halt_if_minSEXP);
    Rcpp::traits::input_parameter< double >::type halt_if_max(halt_if_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_range_dbl(x, halt_if_min, halt_if_max));
    return rcpp_result_gen;
END_RCPP
}
// do_range_int
DoubleVector do_range_int(IntegerVector x, int halt_if_min, int halt_if_max);
RcppExport SEXP _hutilscpp_do_range_int(SEXP xSEXP, SEXP halt_if_minSEXP, SEXP halt_if_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type halt_if_min(halt_if_minSEXP);
    Rcpp::traits::input_parameter< int >::type halt_if_max(halt_if_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_range_int(x, halt_if_min, halt_if_max));
    return rcpp_result_gen;
END_RCPP
}
// do_and3_par
LogicalVector do_and3_par(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, LogicalVector A, LogicalVector B, LogicalVector C, CharacterVector nom, int nThread);
RcppExport SEXP _hutilscpp_do_and3_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP nomSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nom(nomSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_and3_par(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, A, B, C, nom, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_sum3s_par
R_xlen_t do_sum3s_par(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, LogicalVector A, LogicalVector B, LogicalVector C, int nThread);
RcppExport SEXP _hutilscpp_do_sum3s_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_sum3s_par(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, A, B, C, nThread));
    return rcpp_result_gen;
END_RCPP
}
// simd_sum
int simd_sum(IntegerVector x, int a, IntegerVector y, int b);
RcppExport SEXP _hutilscpp_simd_sum(SEXP xSEXP, SEXP aSEXP, SEXP ySEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(simd_sum(x, a, y, b));
    return rcpp_result_gen;
END_RCPP
}
// do_cumsum_reset_logical
IntegerVector do_cumsum_reset_logical(LogicalVector x);
RcppExport SEXP _hutilscpp_do_cumsum_reset_logical(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_cumsum_reset_logical(x));
    return rcpp_result_gen;
END_RCPP
}
// do_cumsum_reset_integer
IntegerVector do_cumsum_reset_integer(LogicalVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_cumsum_reset_integer(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_cumsum_reset_integer(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_cumsum_reset_double
NumericVector do_cumsum_reset_double(LogicalVector x, NumericVector y);
RcppExport SEXP _hutilscpp_do_cumsum_reset_double(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_cumsum_reset_double(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_duplicated_sorted_int
LogicalVector do_duplicated_sorted_int(IntegerVector x);
RcppExport SEXP _hutilscpp_do_duplicated_sorted_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_duplicated_sorted_int(x));
    return rcpp_result_gen;
END_RCPP
}
// do_duplicated_sorted_dbl
LogicalVector do_duplicated_sorted_dbl(DoubleVector x);
RcppExport SEXP _hutilscpp_do_duplicated_sorted_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_duplicated_sorted_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// do_cumsum_reset_sorted_int
IntegerVector do_cumsum_reset_sorted_int(IntegerVector x);
RcppExport SEXP _hutilscpp_do_cumsum_reset_sorted_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_cumsum_reset_sorted_int(x));
    return rcpp_result_gen;
END_RCPP
}
// do_divisible
LogicalVector do_divisible(IntegerVector x, int d, int nThread);
RcppExport SEXP _hutilscpp_do_divisible(SEXP xSEXP, SEXP dSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_divisible(x, d, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_divisible16
LogicalVector do_divisible16(IntegerVector x, int nThread);
RcppExport SEXP _hutilscpp_do_divisible16(SEXP xSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_divisible16(x, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_are_even
LogicalVector do_are_even(IntegerVector x, DoubleVector y, int wb);
RcppExport SEXP _hutilscpp_do_are_even(SEXP xSEXP, SEXP ySEXP, SEXP wbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type wb(wbSEXP);
    rcpp_result_gen = Rcpp::wrap(do_are_even(x, y, wb));
    return rcpp_result_gen;
END_RCPP
}
// do_which_even
IntegerVector do_which_even(IntegerVector x, DoubleVector y, int wb);
RcppExport SEXP _hutilscpp_do_which_even(SEXP xSEXP, SEXP ySEXP, SEXP wbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type wb(wbSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_even(x, y, wb));
    return rcpp_result_gen;
END_RCPP
}
// do_and3_na
LogicalVector do_and3_na(LogicalVector x, LogicalVector y, LogicalVector z, int nThread, int na_value, int maxCall);
RcppExport SEXP _hutilscpp_do_and3_na(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP nThreadSEXP, SEXP na_valueSEXP, SEXP maxCallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    Rcpp::traits::input_parameter< int >::type na_value(na_valueSEXP);
    Rcpp::traits::input_parameter< int >::type maxCall(maxCallSEXP);
    rcpp_result_gen = Rcpp::wrap(do_and3_na(x, y, z, nThread, na_value, maxCall));
    return rcpp_result_gen;
END_RCPP
}
// do_which2_yr
IntegerVector do_which2_yr(IntegerVector Year, int yr, bool consider_yr, IntegerVector x, int xa, bool eqx, bool gtx, bool ltx, IntegerVector y, int ya, bool eqy, bool gty, bool lty);
RcppExport SEXP _hutilscpp_do_which2_yr(SEXP YearSEXP, SEXP yrSEXP, SEXP consider_yrSEXP, SEXP xSEXP, SEXP xaSEXP, SEXP eqxSEXP, SEXP gtxSEXP, SEXP ltxSEXP, SEXP ySEXP, SEXP yaSEXP, SEXP eqySEXP, SEXP gtySEXP, SEXP ltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Year(YearSEXP);
    Rcpp::traits::input_parameter< int >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_yr(consider_yrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type xa(xaSEXP);
    Rcpp::traits::input_parameter< bool >::type eqx(eqxSEXP);
    Rcpp::traits::input_parameter< bool >::type gtx(gtxSEXP);
    Rcpp::traits::input_parameter< bool >::type ltx(ltxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ya(yaSEXP);
    Rcpp::traits::input_parameter< bool >::type eqy(eqySEXP);
    Rcpp::traits::input_parameter< bool >::type gty(gtySEXP);
    Rcpp::traits::input_parameter< bool >::type lty(ltySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which2_yr(Year, yr, consider_yr, x, xa, eqx, gtx, ltx, y, ya, eqy, gty, lty));
    return rcpp_result_gen;
END_RCPP
}
// do_which_in
IntegerVector do_which_in(IntegerVector x, IntegerVector tbl);
RcppExport SEXP _hutilscpp_do_which_in(SEXP xSEXP, SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tbl(tblSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_in(x, tbl));
    return rcpp_result_gen;
END_RCPP
}
// count_logical
IntegerVector count_logical(LogicalVector x);
RcppExport SEXP _hutilscpp_count_logical(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_logical(x));
    return rcpp_result_gen;
END_RCPP
}
// do_in_int
bool do_in_int(int x, IntegerVector table);
RcppExport SEXP _hutilscpp_do_in_int(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(do_in_int(x, table));
    return rcpp_result_gen;
END_RCPP
}
// do_par_in
LogicalVector do_par_in(IntegerVector x, IntegerVector table, int nThread);
RcppExport SEXP _hutilscpp_do_par_in(SEXP xSEXP, SEXP tableSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_par_in(x, table, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_and3_x_op
LogicalVector do_and3_x_op(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, IntegerVector X3, IntegerVector Y3, IntegerVector Z3, LogicalVector A, LogicalVector B, LogicalVector C, int nThread);
RcppExport SEXP _hutilscpp_do_and3_x_op(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP X3SEXP, SEXP Y3SEXP, SEXP Z3SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Y3(Y3SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z3(Z3SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_and3_x_op(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, X3, Y3, Z3, A, B, C, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_op_along
LogicalVector do_op_along(IntegerVector x, int op, IntegerVector y, int nThread);
RcppExport SEXP _hutilscpp_do_op_along(SEXP xSEXP, SEXP opSEXP, SEXP ySEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type op(opSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_op_along(x, op, y, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_or3_par
LogicalVector do_or3_par(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, LogicalVector A, LogicalVector B, LogicalVector C, CharacterVector nom, int nThread);
RcppExport SEXP _hutilscpp_do_or3_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP nomSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nom(nomSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_or3_par(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, A, B, C, nom, nThread));
    return rcpp_result_gen;
END_RCPP
}
// sum_or3s_par
int sum_or3s_par(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, LogicalVector A, LogicalVector B, LogicalVector C);
RcppExport SEXP _hutilscpp_sum_or3s_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_or3s_par(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// do_range_dbl_simple
DoubleVector do_range_dbl_simple(DoubleVector x);
RcppExport SEXP _hutilscpp_do_range_dbl_simple(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_range_dbl_simple(x));
    return rcpp_result_gen;
END_RCPP
}
// do_anyNonfinite
R_xlen_t do_anyNonfinite(DoubleVector x);
RcppExport SEXP _hutilscpp_do_anyNonfinite(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_anyNonfinite(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first
R_xlen_t do_which_first(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_first(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last
R_xlen_t do_which_last(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_last(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_false
R_xlen_t do_which_first_false(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_first_false(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_false(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_false
R_xlen_t do_which_last_false(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_last_false(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_false(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_notTRUE
R_xlen_t do_which_first_notTRUE(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_first_notTRUE(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_notTRUE(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_notTRUE
R_xlen_t do_which_last_notTRUE(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_last_notTRUE(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_notTRUE(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_notFALSE
R_xlen_t do_which_last_notFALSE(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_last_notFALSE(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_notFALSE(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_int_int
R_xlen_t do_which_first_int_int(IntegerVector x, IntegerVector y, bool eq, bool gt, bool lt);
RcppExport SEXP _hutilscpp_do_which_first_int_int(SEXP xSEXP, SEXP ySEXP, SEXP eqSEXP, SEXP gtSEXP, SEXP ltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type eq(eqSEXP);
    Rcpp::traits::input_parameter< bool >::type gt(gtSEXP);
    Rcpp::traits::input_parameter< bool >::type lt(ltSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_int_int(x, y, eq, gt, lt));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_lgl_lgl
R_xlen_t do_which_first_lgl_lgl(LogicalVector x, LogicalVector y, bool eq, bool lt, bool gt, bool skip_na);
RcppExport SEXP _hutilscpp_do_which_first_lgl_lgl(SEXP xSEXP, SEXP ySEXP, SEXP eqSEXP, SEXP ltSEXP, SEXP gtSEXP, SEXP skip_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type eq(eqSEXP);
    Rcpp::traits::input_parameter< bool >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< bool >::type gt(gtSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_na(skip_naSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_lgl_lgl(x, y, eq, lt, gt, skip_na));
    return rcpp_result_gen;
END_RCPP
}
// do_which_1st_uneq_dbl_dbl
R_xlen_t do_which_1st_uneq_dbl_dbl(DoubleVector x, DoubleVector y, double tol);
RcppExport SEXP _hutilscpp_do_which_1st_uneq_dbl_dbl(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_1st_uneq_dbl_dbl(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_uneq_dbl_dbl
R_xlen_t do_which_last_uneq_dbl_dbl(DoubleVector x, DoubleVector y, double tol);
RcppExport SEXP _hutilscpp_do_which_last_uneq_dbl_dbl(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_uneq_dbl_dbl(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// do_which_1st_uneq_int_int
R_xlen_t do_which_1st_uneq_int_int(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_which_1st_uneq_int_int(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_1st_uneq_int_int(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_uneq_int_int
R_xlen_t do_which_last_uneq_int_int(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_which_last_uneq_int_int(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_uneq_int_int(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_which_1st_eq_dbl_dbl
R_xlen_t do_which_1st_eq_dbl_dbl(DoubleVector x, DoubleVector y, double tol);
RcppExport SEXP _hutilscpp_do_which_1st_eq_dbl_dbl(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_1st_eq_dbl_dbl(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_eq_dbl_dbl
R_xlen_t do_which_last_eq_dbl_dbl(DoubleVector x, DoubleVector y, double tol);
RcppExport SEXP _hutilscpp_do_which_last_eq_dbl_dbl(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_eq_dbl_dbl(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// do_which_1st_eq_int_int
R_xlen_t do_which_1st_eq_int_int(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_which_1st_eq_int_int(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_1st_eq_int_int(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_eq_int_int
R_xlen_t do_which_last_eq_int_int(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_which_last_eq_int_int(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_eq_int_int(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_xor2
LogicalVector do_xor2(LogicalVector x, LogicalVector y, bool anyNAx, bool anyNAy);
RcppExport SEXP _hutilscpp_do_xor2(SEXP xSEXP, SEXP ySEXP, SEXP anyNAxSEXP, SEXP anyNAySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAx(anyNAxSEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAy(anyNAySEXP);
    rcpp_result_gen = Rcpp::wrap(do_xor2(x, y, anyNAx, anyNAy));
    return rcpp_result_gen;
END_RCPP
}
// showValue
void showValue(const char* what, double x);
RcppExport SEXP _hutilscpp_showValue(SEXP whatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type what(whatSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    showValue(what, x);
    return R_NilValue;
END_RCPP
}
// haversine_distance
double haversine_distance(double olat1, double olon1, double olat2, double olon2, bool unitless);
RcppExport SEXP _hutilscpp_haversine_distance(SEXP olat1SEXP, SEXP olon1SEXP, SEXP olat2SEXP, SEXP olon2SEXP, SEXP unitlessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type olat1(olat1SEXP);
    Rcpp::traits::input_parameter< double >::type olon1(olon1SEXP);
    Rcpp::traits::input_parameter< double >::type olat2(olat2SEXP);
    Rcpp::traits::input_parameter< double >::type olon2(olon2SEXP);
    Rcpp::traits::input_parameter< bool >::type unitless(unitlessSEXP);
    rcpp_result_gen = Rcpp::wrap(haversine_distance(olat1, olon1, olat2, olon2, unitless));
    return rcpp_result_gen;
END_RCPP
}
// haversineDistance
NumericVector haversineDistance(NumericVector lat1, NumericVector lon1, NumericVector lat2, NumericVector lon2, bool unitless);
RcppExport SEXP _hutilscpp_haversineDistance(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP, SEXP unitlessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< bool >::type unitless(unitlessSEXP);
    rcpp_result_gen = Rcpp::wrap(haversineDistance(lat1, lon1, lat2, lon2, unitless));
    return rcpp_result_gen;
END_RCPP
}
// theEuclidDistance
NumericVector theEuclidDistance(NumericVector x1, NumericVector x2, NumericVector y1, NumericVector y2, bool unitless);
RcppExport SEXP _hutilscpp_theEuclidDistance(SEXP x1SEXP, SEXP x2SEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP unitlessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< bool >::type unitless(unitlessSEXP);
    rcpp_result_gen = Rcpp::wrap(theEuclidDistance(x1, x2, y1, y2, unitless));
    return rcpp_result_gen;
END_RCPP
}
// hausdorffEuclid
double hausdorffEuclid(NumericVector x, NumericVector y);
RcppExport SEXP _hutilscpp_hausdorffEuclid(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(hausdorffEuclid(x, y));
    return rcpp_result_gen;
END_RCPP
}
// EmptiestQuarter
IntegerVector EmptiestQuarter(NumericVector x, NumericVector y, double minx, double maxx, double miny, double maxy);
RcppExport SEXP _hutilscpp_EmptiestQuarter(SEXP xSEXP, SEXP ySEXP, SEXP minxSEXP, SEXP maxxSEXP, SEXP minySEXP, SEXP maxySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type minx(minxSEXP);
    Rcpp::traits::input_parameter< double >::type maxx(maxxSEXP);
    Rcpp::traits::input_parameter< double >::type miny(minySEXP);
    Rcpp::traits::input_parameter< double >::type maxy(maxySEXP);
    rcpp_result_gen = Rcpp::wrap(EmptiestQuarter(x, y, minx, maxx, miny, maxy));
    return rcpp_result_gen;
END_RCPP
}
// theEmptiestQuarters
IntegerVector theEmptiestQuarters(NumericVector x, NumericVector y, double minx, double maxx, double miny, double maxy, int depth);
RcppExport SEXP _hutilscpp_theEmptiestQuarters(SEXP xSEXP, SEXP ySEXP, SEXP minxSEXP, SEXP maxxSEXP, SEXP minySEXP, SEXP maxySEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type minx(minxSEXP);
    Rcpp::traits::input_parameter< double >::type maxx(maxxSEXP);
    Rcpp::traits::input_parameter< double >::type miny(minySEXP);
    Rcpp::traits::input_parameter< double >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(theEmptiestQuarters(x, y, minx, maxx, miny, maxy, depth));
    return rcpp_result_gen;
END_RCPP
}
// which_min_HaversineDistance
int which_min_HaversineDistance(NumericVector lat1, NumericVector lon1, double lat2, double lon2, double upperBound);
RcppExport SEXP _hutilscpp_which_min_HaversineDistance(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP, SEXP upperBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< double >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< double >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< double >::type upperBound(upperBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(which_min_HaversineDistance(lat1, lon1, lat2, lon2, upperBound));
    return rcpp_result_gen;
END_RCPP
}
// match_min_Haversine
List match_min_Haversine(NumericVector lat1, NumericVector lon1, NumericVector lat2, NumericVector lon2, IntegerVector tabl, double cartR, double dist0_km, bool verify_cartR, bool do_verify_box, bool excl_self, int ncores);
RcppExport SEXP _hutilscpp_match_min_Haversine(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP, SEXP tablSEXP, SEXP cartRSEXP, SEXP dist0_kmSEXP, SEXP verify_cartRSEXP, SEXP do_verify_boxSEXP, SEXP excl_selfSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tabl(tablSEXP);
    Rcpp::traits::input_parameter< double >::type cartR(cartRSEXP);
    Rcpp::traits::input_parameter< double >::type dist0_km(dist0_kmSEXP);
    Rcpp::traits::input_parameter< bool >::type verify_cartR(verify_cartRSEXP);
    Rcpp::traits::input_parameter< bool >::type do_verify_box(do_verify_boxSEXP);
    Rcpp::traits::input_parameter< bool >::type excl_self(excl_selfSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(match_min_Haversine(lat1, lon1, lat2, lon2, tabl, cartR, dist0_km, verify_cartR, do_verify_box, excl_self, ncores));
    return rcpp_result_gen;
END_RCPP
}
// is_safe2int
int is_safe2int(DoubleVector x, double int_max);
RcppExport SEXP _hutilscpp_is_safe2int(SEXP xSEXP, SEXP int_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type int_max(int_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(is_safe2int(x, int_max));
    return rcpp_result_gen;
END_RCPP
}
// force_as_integer
IntegerVector force_as_integer(DoubleVector x, int na_code);
RcppExport SEXP _hutilscpp_force_as_integer(SEXP xSEXP, SEXP na_codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type na_code(na_codeSEXP);
    rcpp_result_gen = Rcpp::wrap(force_as_integer(x, na_code));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted_ascending_dbl
bool is_sorted_ascending_dbl(DoubleVector x);
RcppExport SEXP _hutilscpp_is_sorted_ascending_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted_ascending_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted_descending_dbl
bool is_sorted_descending_dbl(DoubleVector x);
RcppExport SEXP _hutilscpp_is_sorted_descending_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted_descending_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted_ascending_int
bool is_sorted_ascending_int(IntegerVector x);
RcppExport SEXP _hutilscpp_is_sorted_ascending_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted_ascending_int(x));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted_descending_int
bool is_sorted_descending_int(IntegerVector x);
RcppExport SEXP _hutilscpp_is_sorted_descending_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted_descending_int(x));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted_int
bool is_sorted_int(IntegerVector x);
RcppExport SEXP _hutilscpp_is_sorted_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted_int(x));
    return rcpp_result_gen;
END_RCPP
}
// do_isntSorted_int
R_xlen_t do_isntSorted_int(IntegerVector x);
RcppExport SEXP _hutilscpp_do_isntSorted_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_isntSorted_int(x));
    return rcpp_result_gen;
END_RCPP
}
// is_sorted_dbl
bool is_sorted_dbl(DoubleVector x);
RcppExport SEXP _hutilscpp_is_sorted_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sorted_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// do_isntSorted_dbl
R_xlen_t do_isntSorted_dbl(DoubleVector x);
RcppExport SEXP _hutilscpp_do_isntSorted_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_isntSorted_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// do_or3
LogicalVector do_or3(LogicalVector x, LogicalVector y, LogicalVector z);
RcppExport SEXP _hutilscpp_do_or3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(do_or3(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// do_and3
LogicalVector do_and3(LogicalVector x, LogicalVector y, LogicalVector z);
RcppExport SEXP _hutilscpp_do_and3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(do_and3(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// na_and
LogicalVector na_and(LogicalVector x);
RcppExport SEXP _hutilscpp_na_and(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(na_and(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which3
List do_which3(LogicalVector x, LogicalVector y, LogicalVector z, bool And, bool anyNAx, bool anyNAy, bool anyNAz);
RcppExport SEXP _hutilscpp_do_which3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP AndSEXP, SEXP anyNAxSEXP, SEXP anyNAySEXP, SEXP anyNAzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type And(AndSEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAx(anyNAxSEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAy(anyNAySEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAz(anyNAzSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which3(x, y, z, And, anyNAx, anyNAy, anyNAz));
    return rcpp_result_gen;
END_RCPP
}
// do_which3_mem
IntegerVector do_which3_mem(LogicalVector x, LogicalVector y, LogicalVector z, bool And);
RcppExport SEXP _hutilscpp_do_which3_mem(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP AndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type And(AndSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which3_mem(x, y, z, And));
    return rcpp_result_gen;
END_RCPP
}
// diagnose_omp
List diagnose_omp(int threads_requested, String msg_no_openmp, String msg_threads_neg, String msg_unknown_issues, String msg_too_many_threads);
RcppExport SEXP _hutilscpp_diagnose_omp(SEXP threads_requestedSEXP, SEXP msg_no_openmpSEXP, SEXP msg_threads_negSEXP, SEXP msg_unknown_issuesSEXP, SEXP msg_too_many_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type threads_requested(threads_requestedSEXP);
    Rcpp::traits::input_parameter< String >::type msg_no_openmp(msg_no_openmpSEXP);
    Rcpp::traits::input_parameter< String >::type msg_threads_neg(msg_threads_negSEXP);
    Rcpp::traits::input_parameter< String >::type msg_unknown_issues(msg_unknown_issuesSEXP);
    Rcpp::traits::input_parameter< String >::type msg_too_many_threads(msg_too_many_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(diagnose_omp(threads_requested, msg_no_openmp, msg_threads_neg, msg_unknown_issues, msg_too_many_threads));
    return rcpp_result_gen;
END_RCPP
}
// n_casi1
int n_casi1(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_n_casi1(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(n_casi1(x, y));
    return rcpp_result_gen;
END_RCPP
}
// n_casi2
int n_casi2(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_n_casi2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(n_casi2(x, y));
    return rcpp_result_gen;
END_RCPP
}
// n_casi3
int n_casi3(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_n_casi3(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(n_casi3(x, y));
    return rcpp_result_gen;
END_RCPP
}
// n_casi4
int n_casi4(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_n_casi4(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(n_casi4(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_pmax0_abs_dbl
DoubleVector do_pmax0_abs_dbl(DoubleVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmax0_abs_dbl(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmax0_abs_dbl(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmin0_abs_dbl
DoubleVector do_pmin0_abs_dbl(DoubleVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmin0_abs_dbl(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmin0_abs_dbl(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmax0_abs_int
IntegerVector do_pmax0_abs_int(IntegerVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmax0_abs_int(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmax0_abs_int(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmin0_abs_int
IntegerVector do_pmin0_abs_int(IntegerVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmin0_abs_int(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmin0_abs_int(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_firstNonNegativeRadix_int
R_xlen_t do_firstNonNegativeRadix_int(IntegerVector x, R_xlen_t mini, R_xlen_t maxi, bool desc, int depth);
RcppExport SEXP _hutilscpp_do_firstNonNegativeRadix_int(SEXP xSEXP, SEXP miniSEXP, SEXP maxiSEXP, SEXP descSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type mini(miniSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type maxi(maxiSEXP);
    Rcpp::traits::input_parameter< bool >::type desc(descSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(do_firstNonNegativeRadix_int(x, mini, maxi, desc, depth));
    return rcpp_result_gen;
END_RCPP
}
// do_firstNonNegativeRadix_dbl
R_xlen_t do_firstNonNegativeRadix_dbl(DoubleVector x, R_xlen_t mini, R_xlen_t maxi, bool desc, int depth);
RcppExport SEXP _hutilscpp_do_firstNonNegativeRadix_dbl(SEXP xSEXP, SEXP miniSEXP, SEXP maxiSEXP, SEXP descSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type mini(miniSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type maxi(maxiSEXP);
    Rcpp::traits::input_parameter< bool >::type desc(descSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(do_firstNonNegativeRadix_dbl(x, mini, maxi, desc, depth));
    return rcpp_result_gen;
END_RCPP
}
// do_pmax0_radix_sorted_dbl
DoubleVector do_pmax0_radix_sorted_dbl(DoubleVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmax0_radix_sorted_dbl(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmax0_radix_sorted_dbl(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmin0_radix_sorted_dbl
DoubleVector do_pmin0_radix_sorted_dbl(DoubleVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmin0_radix_sorted_dbl(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmin0_radix_sorted_dbl(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmin0_radix_sorted_int
IntegerVector do_pmin0_radix_sorted_int(IntegerVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmin0_radix_sorted_int(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmin0_radix_sorted_int(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmax0_radix_sorted_int
IntegerVector do_pmax0_radix_sorted_int(IntegerVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmax0_radix_sorted_int(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmax0_radix_sorted_int(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmax0_bitwise
IntegerVector do_pmax0_bitwise(IntegerVector x, int nThread);
RcppExport SEXP _hutilscpp_do_pmax0_bitwise(SEXP xSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmax0_bitwise(x, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxC_dbl
NumericVector do_pmaxC_dbl(NumericVector x, double a, bool in_place);
RcppExport SEXP _hutilscpp_do_pmaxC_dbl(SEXP xSEXP, SEXP aSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxC_dbl(x, a, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxC_int
IntegerVector do_pmaxC_int(IntegerVector x, int a, bool in_place);
RcppExport SEXP _hutilscpp_do_pmaxC_int(SEXP xSEXP, SEXP aSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxC_int(x, a, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmax0
NumericVector do_pmax0(NumericVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmax0(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmax0(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxIP_int
IntegerVector do_pmaxIP_int(IntegerVector x, int a);
RcppExport SEXP _hutilscpp_do_pmaxIP_int(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxIP_int(x, a));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxIP_dbl
DoubleVector do_pmaxIP_dbl(DoubleVector x, double a);
RcppExport SEXP _hutilscpp_do_pmaxIP_dbl(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxIP_dbl(x, a));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxIPnum0
NumericVector do_pmaxIPnum0(NumericVector x);
RcppExport SEXP _hutilscpp_do_pmaxIPnum0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxIPnum0(x));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxIPint0
IntegerVector do_pmaxIPint0(IntegerVector x);
RcppExport SEXP _hutilscpp_do_pmaxIPint0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxIPint0(x));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxNumNum
NumericVector do_pmaxNumNum(NumericVector x, NumericVector y, bool in_place);
RcppExport SEXP _hutilscpp_do_pmaxNumNum(SEXP xSEXP, SEXP ySEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxNumNum(x, y, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmaxIntInt
IntegerVector do_pmaxIntInt(IntegerVector x, IntegerVector y, bool in_place);
RcppExport SEXP _hutilscpp_do_pmaxIntInt(SEXP xSEXP, SEXP ySEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmaxIntInt(x, y, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pminC
NumericVector do_pminC(NumericVector x, double a, bool in_place);
RcppExport SEXP _hutilscpp_do_pminC(SEXP xSEXP, SEXP aSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pminC(x, a, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pminC_int
IntegerVector do_pminC_int(IntegerVector x, double a, bool in_place);
RcppExport SEXP _hutilscpp_do_pminC_int(SEXP xSEXP, SEXP aSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pminC_int(x, a, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmin0_dbl
NumericVector do_pmin0_dbl(NumericVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmin0_dbl(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmin0_dbl(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pmin0_int
IntegerVector do_pmin0_int(IntegerVector x, bool in_place);
RcppExport SEXP _hutilscpp_do_pmin0_int(SEXP xSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pmin0_int(x, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pminV_dbl
NumericVector do_pminV_dbl(NumericVector x, NumericVector y, bool in_place);
RcppExport SEXP _hutilscpp_do_pminV_dbl(SEXP xSEXP, SEXP ySEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pminV_dbl(x, y, in_place));
    return rcpp_result_gen;
END_RCPP
}
// do_pminV_int
IntegerVector do_pminV_int(IntegerVector x, IntegerVector y, bool in_place);
RcppExport SEXP _hutilscpp_do_pminV_int(SEXP xSEXP, SEXP ySEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(do_pminV_int(x, y, in_place));
    return rcpp_result_gen;
END_RCPP
}
// seqN
IntegerVector seqN(IntegerVector x, IntegerVector y, int m);
RcppExport SEXP _hutilscpp_seqN(SEXP xSEXP, SEXP ySEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(seqN(x, y, m));
    return rcpp_result_gen;
END_RCPP
}
// squishn
NumericVector squishn(NumericVector x, double a, double b, bool in_place);
RcppExport SEXP _hutilscpp_squishn(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(squishn(x, a, b, in_place));
    return rcpp_result_gen;
END_RCPP
}
// squishi
IntegerVector squishi(IntegerVector x, int a, int b, bool in_place);
RcppExport SEXP _hutilscpp_squishi(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP in_placeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    rcpp_result_gen = Rcpp::wrap(squishi(x, a, b, in_place));
    return rcpp_result_gen;
END_RCPP
}
// sum_isna_int
R_xlen_t sum_isna_int(IntegerVector x);
RcppExport SEXP _hutilscpp_sum_isna_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_isna_int(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_isna_dbl
R_xlen_t sum_isna_dbl(DoubleVector x);
RcppExport SEXP _hutilscpp_sum_isna_dbl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_isna_dbl(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_isna_complx
R_xlen_t sum_isna_complx(ComplexVector x);
RcppExport SEXP _hutilscpp_sum_isna_complx(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_isna_complx(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_isna_char
R_xlen_t sum_isna_char(CharacterVector x);
RcppExport SEXP _hutilscpp_sum_isna_char(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_isna_char(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_isfalse
R_xlen_t sum_isfalse(LogicalVector x);
RcppExport SEXP _hutilscpp_sum_isfalse(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_isfalse(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_isna_logi
R_xlen_t sum_isna_logi(LogicalVector x);
RcppExport SEXP _hutilscpp_sum_isna_logi(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_isna_logi(x));
    return rcpp_result_gen;
END_RCPP
}
// do_summary3_dbl
DoubleVector do_summary3_dbl(DoubleVector x, DoubleVector y, DoubleVector z, bool in_place, bool do_max);
RcppExport SEXP _hutilscpp_do_summary3_dbl(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP in_placeSEXP, SEXP do_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    Rcpp::traits::input_parameter< bool >::type do_max(do_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_summary3_dbl(x, y, z, in_place, do_max));
    return rcpp_result_gen;
END_RCPP
}
// do_summary3_int
IntegerVector do_summary3_int(IntegerVector x, IntegerVector y, IntegerVector z, bool in_place, bool do_max);
RcppExport SEXP _hutilscpp_do_summary3_int(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP in_placeSEXP, SEXP do_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    Rcpp::traits::input_parameter< bool >::type do_max(do_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_summary3_int(x, y, z, in_place, do_max));
    return rcpp_result_gen;
END_RCPP
}
// extractMandatory
List extractMandatory(CharacterVector x, CharacterVector command, int nCommands);
RcppExport SEXP _hutilscpp_extractMandatory(SEXP xSEXP, SEXP commandSEXP, SEXP nCommandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type command(commandSEXP);
    Rcpp::traits::input_parameter< int >::type nCommands(nCommandsSEXP);
    rcpp_result_gen = Rcpp::wrap(extractMandatory(x, command, nCommands));
    return rcpp_result_gen;
END_RCPP
}
// do_which_true_onwards
R_xlen_t do_which_true_onwards(LogicalVector x);
RcppExport SEXP _hutilscpp_do_which_true_onwards(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_true_onwards(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP do_c_pmax(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_hutilscpp_AnyCharMatch", (DL_FUNC) &_hutilscpp_AnyCharMatch, 3},
    {"_hutilscpp_AnyWhich_dbl", (DL_FUNC) &_hutilscpp_AnyWhich_dbl, 6},
    {"_hutilscpp_AnyWhich_int", (DL_FUNC) &_hutilscpp_AnyWhich_int, 6},
    {"_hutilscpp_AnyWhichInDbl", (DL_FUNC) &_hutilscpp_AnyWhichInDbl, 2},
    {"_hutilscpp_AnyWhichInInt", (DL_FUNC) &_hutilscpp_AnyWhichInInt, 2},
    {"_hutilscpp_Implies", (DL_FUNC) &_hutilscpp_Implies, 4},
    {"_hutilscpp_anyOutside_int", (DL_FUNC) &_hutilscpp_anyOutside_int, 5},
    {"_hutilscpp_anyOutside_dbl", (DL_FUNC) &_hutilscpp_anyOutside_dbl, 5},
    {"_hutilscpp_do_range_dbl", (DL_FUNC) &_hutilscpp_do_range_dbl, 3},
    {"_hutilscpp_do_range_int", (DL_FUNC) &_hutilscpp_do_range_int, 3},
    {"_hutilscpp_do_and3_par", (DL_FUNC) &_hutilscpp_do_and3_par, 17},
    {"_hutilscpp_do_sum3s_par", (DL_FUNC) &_hutilscpp_do_sum3s_par, 16},
    {"_hutilscpp_simd_sum", (DL_FUNC) &_hutilscpp_simd_sum, 4},
    {"_hutilscpp_do_cumsum_reset_logical", (DL_FUNC) &_hutilscpp_do_cumsum_reset_logical, 1},
    {"_hutilscpp_do_cumsum_reset_integer", (DL_FUNC) &_hutilscpp_do_cumsum_reset_integer, 2},
    {"_hutilscpp_do_cumsum_reset_double", (DL_FUNC) &_hutilscpp_do_cumsum_reset_double, 2},
    {"_hutilscpp_do_duplicated_sorted_int", (DL_FUNC) &_hutilscpp_do_duplicated_sorted_int, 1},
    {"_hutilscpp_do_duplicated_sorted_dbl", (DL_FUNC) &_hutilscpp_do_duplicated_sorted_dbl, 1},
    {"_hutilscpp_do_cumsum_reset_sorted_int", (DL_FUNC) &_hutilscpp_do_cumsum_reset_sorted_int, 1},
    {"_hutilscpp_do_divisible", (DL_FUNC) &_hutilscpp_do_divisible, 3},
    {"_hutilscpp_do_divisible16", (DL_FUNC) &_hutilscpp_do_divisible16, 2},
    {"_hutilscpp_do_are_even", (DL_FUNC) &_hutilscpp_do_are_even, 3},
    {"_hutilscpp_do_which_even", (DL_FUNC) &_hutilscpp_do_which_even, 3},
    {"_hutilscpp_do_and3_na", (DL_FUNC) &_hutilscpp_do_and3_na, 6},
    {"_hutilscpp_do_which2_yr", (DL_FUNC) &_hutilscpp_do_which2_yr, 13},
    {"_hutilscpp_do_which_in", (DL_FUNC) &_hutilscpp_do_which_in, 2},
    {"_hutilscpp_count_logical", (DL_FUNC) &_hutilscpp_count_logical, 1},
    {"_hutilscpp_do_in_int", (DL_FUNC) &_hutilscpp_do_in_int, 2},
    {"_hutilscpp_do_par_in", (DL_FUNC) &_hutilscpp_do_par_in, 3},
    {"_hutilscpp_do_and3_x_op", (DL_FUNC) &_hutilscpp_do_and3_x_op, 19},
    {"_hutilscpp_do_op_along", (DL_FUNC) &_hutilscpp_do_op_along, 4},
    {"_hutilscpp_do_or3_par", (DL_FUNC) &_hutilscpp_do_or3_par, 17},
    {"_hutilscpp_sum_or3s_par", (DL_FUNC) &_hutilscpp_sum_or3s_par, 15},
    {"_hutilscpp_do_range_dbl_simple", (DL_FUNC) &_hutilscpp_do_range_dbl_simple, 1},
    {"_hutilscpp_do_anyNonfinite", (DL_FUNC) &_hutilscpp_do_anyNonfinite, 1},
    {"_hutilscpp_do_which_first", (DL_FUNC) &_hutilscpp_do_which_first, 1},
    {"_hutilscpp_do_which_last", (DL_FUNC) &_hutilscpp_do_which_last, 1},
    {"_hutilscpp_do_which_first_false", (DL_FUNC) &_hutilscpp_do_which_first_false, 1},
    {"_hutilscpp_do_which_last_false", (DL_FUNC) &_hutilscpp_do_which_last_false, 1},
    {"_hutilscpp_do_which_first_notTRUE", (DL_FUNC) &_hutilscpp_do_which_first_notTRUE, 1},
    {"_hutilscpp_do_which_last_notTRUE", (DL_FUNC) &_hutilscpp_do_which_last_notTRUE, 1},
    {"_hutilscpp_do_which_last_notFALSE", (DL_FUNC) &_hutilscpp_do_which_last_notFALSE, 1},
    {"_hutilscpp_do_which_first_int_int", (DL_FUNC) &_hutilscpp_do_which_first_int_int, 5},
    {"_hutilscpp_do_which_first_lgl_lgl", (DL_FUNC) &_hutilscpp_do_which_first_lgl_lgl, 6},
    {"_hutilscpp_do_which_1st_uneq_dbl_dbl", (DL_FUNC) &_hutilscpp_do_which_1st_uneq_dbl_dbl, 3},
    {"_hutilscpp_do_which_last_uneq_dbl_dbl", (DL_FUNC) &_hutilscpp_do_which_last_uneq_dbl_dbl, 3},
    {"_hutilscpp_do_which_1st_uneq_int_int", (DL_FUNC) &_hutilscpp_do_which_1st_uneq_int_int, 2},
    {"_hutilscpp_do_which_last_uneq_int_int", (DL_FUNC) &_hutilscpp_do_which_last_uneq_int_int, 2},
    {"_hutilscpp_do_which_1st_eq_dbl_dbl", (DL_FUNC) &_hutilscpp_do_which_1st_eq_dbl_dbl, 3},
    {"_hutilscpp_do_which_last_eq_dbl_dbl", (DL_FUNC) &_hutilscpp_do_which_last_eq_dbl_dbl, 3},
    {"_hutilscpp_do_which_1st_eq_int_int", (DL_FUNC) &_hutilscpp_do_which_1st_eq_int_int, 2},
    {"_hutilscpp_do_which_last_eq_int_int", (DL_FUNC) &_hutilscpp_do_which_last_eq_int_int, 2},
    {"_hutilscpp_do_xor2", (DL_FUNC) &_hutilscpp_do_xor2, 4},
    {"_hutilscpp_showValue", (DL_FUNC) &_hutilscpp_showValue, 2},
    {"_hutilscpp_haversine_distance", (DL_FUNC) &_hutilscpp_haversine_distance, 5},
    {"_hutilscpp_haversineDistance", (DL_FUNC) &_hutilscpp_haversineDistance, 5},
    {"_hutilscpp_theEuclidDistance", (DL_FUNC) &_hutilscpp_theEuclidDistance, 5},
    {"_hutilscpp_hausdorffEuclid", (DL_FUNC) &_hutilscpp_hausdorffEuclid, 2},
    {"_hutilscpp_EmptiestQuarter", (DL_FUNC) &_hutilscpp_EmptiestQuarter, 6},
    {"_hutilscpp_theEmptiestQuarters", (DL_FUNC) &_hutilscpp_theEmptiestQuarters, 7},
    {"_hutilscpp_which_min_HaversineDistance", (DL_FUNC) &_hutilscpp_which_min_HaversineDistance, 5},
    {"_hutilscpp_match_min_Haversine", (DL_FUNC) &_hutilscpp_match_min_Haversine, 11},
    {"_hutilscpp_is_safe2int", (DL_FUNC) &_hutilscpp_is_safe2int, 2},
    {"_hutilscpp_force_as_integer", (DL_FUNC) &_hutilscpp_force_as_integer, 2},
    {"_hutilscpp_is_sorted_ascending_dbl", (DL_FUNC) &_hutilscpp_is_sorted_ascending_dbl, 1},
    {"_hutilscpp_is_sorted_descending_dbl", (DL_FUNC) &_hutilscpp_is_sorted_descending_dbl, 1},
    {"_hutilscpp_is_sorted_ascending_int", (DL_FUNC) &_hutilscpp_is_sorted_ascending_int, 1},
    {"_hutilscpp_is_sorted_descending_int", (DL_FUNC) &_hutilscpp_is_sorted_descending_int, 1},
    {"_hutilscpp_is_sorted_int", (DL_FUNC) &_hutilscpp_is_sorted_int, 1},
    {"_hutilscpp_do_isntSorted_int", (DL_FUNC) &_hutilscpp_do_isntSorted_int, 1},
    {"_hutilscpp_is_sorted_dbl", (DL_FUNC) &_hutilscpp_is_sorted_dbl, 1},
    {"_hutilscpp_do_isntSorted_dbl", (DL_FUNC) &_hutilscpp_do_isntSorted_dbl, 1},
    {"_hutilscpp_do_or3", (DL_FUNC) &_hutilscpp_do_or3, 3},
    {"_hutilscpp_do_and3", (DL_FUNC) &_hutilscpp_do_and3, 3},
    {"_hutilscpp_na_and", (DL_FUNC) &_hutilscpp_na_and, 1},
    {"_hutilscpp_do_which3", (DL_FUNC) &_hutilscpp_do_which3, 7},
    {"_hutilscpp_do_which3_mem", (DL_FUNC) &_hutilscpp_do_which3_mem, 4},
    {"_hutilscpp_diagnose_omp", (DL_FUNC) &_hutilscpp_diagnose_omp, 5},
    {"_hutilscpp_n_casi1", (DL_FUNC) &_hutilscpp_n_casi1, 2},
    {"_hutilscpp_n_casi2", (DL_FUNC) &_hutilscpp_n_casi2, 2},
    {"_hutilscpp_n_casi3", (DL_FUNC) &_hutilscpp_n_casi3, 2},
    {"_hutilscpp_n_casi4", (DL_FUNC) &_hutilscpp_n_casi4, 2},
    {"_hutilscpp_do_pmax0_abs_dbl", (DL_FUNC) &_hutilscpp_do_pmax0_abs_dbl, 2},
    {"_hutilscpp_do_pmin0_abs_dbl", (DL_FUNC) &_hutilscpp_do_pmin0_abs_dbl, 2},
    {"_hutilscpp_do_pmax0_abs_int", (DL_FUNC) &_hutilscpp_do_pmax0_abs_int, 2},
    {"_hutilscpp_do_pmin0_abs_int", (DL_FUNC) &_hutilscpp_do_pmin0_abs_int, 2},
    {"_hutilscpp_do_firstNonNegativeRadix_int", (DL_FUNC) &_hutilscpp_do_firstNonNegativeRadix_int, 5},
    {"_hutilscpp_do_firstNonNegativeRadix_dbl", (DL_FUNC) &_hutilscpp_do_firstNonNegativeRadix_dbl, 5},
    {"_hutilscpp_do_pmax0_radix_sorted_dbl", (DL_FUNC) &_hutilscpp_do_pmax0_radix_sorted_dbl, 2},
    {"_hutilscpp_do_pmin0_radix_sorted_dbl", (DL_FUNC) &_hutilscpp_do_pmin0_radix_sorted_dbl, 2},
    {"_hutilscpp_do_pmin0_radix_sorted_int", (DL_FUNC) &_hutilscpp_do_pmin0_radix_sorted_int, 2},
    {"_hutilscpp_do_pmax0_radix_sorted_int", (DL_FUNC) &_hutilscpp_do_pmax0_radix_sorted_int, 2},
    {"_hutilscpp_do_pmax0_bitwise", (DL_FUNC) &_hutilscpp_do_pmax0_bitwise, 2},
    {"_hutilscpp_do_pmaxC_dbl", (DL_FUNC) &_hutilscpp_do_pmaxC_dbl, 3},
    {"_hutilscpp_do_pmaxC_int", (DL_FUNC) &_hutilscpp_do_pmaxC_int, 3},
    {"_hutilscpp_do_pmax0", (DL_FUNC) &_hutilscpp_do_pmax0, 2},
    {"_hutilscpp_do_pmaxIP_int", (DL_FUNC) &_hutilscpp_do_pmaxIP_int, 2},
    {"_hutilscpp_do_pmaxIP_dbl", (DL_FUNC) &_hutilscpp_do_pmaxIP_dbl, 2},
    {"_hutilscpp_do_pmaxIPnum0", (DL_FUNC) &_hutilscpp_do_pmaxIPnum0, 1},
    {"_hutilscpp_do_pmaxIPint0", (DL_FUNC) &_hutilscpp_do_pmaxIPint0, 1},
    {"_hutilscpp_do_pmaxNumNum", (DL_FUNC) &_hutilscpp_do_pmaxNumNum, 3},
    {"_hutilscpp_do_pmaxIntInt", (DL_FUNC) &_hutilscpp_do_pmaxIntInt, 3},
    {"_hutilscpp_do_pminC", (DL_FUNC) &_hutilscpp_do_pminC, 3},
    {"_hutilscpp_do_pminC_int", (DL_FUNC) &_hutilscpp_do_pminC_int, 3},
    {"_hutilscpp_do_pmin0_dbl", (DL_FUNC) &_hutilscpp_do_pmin0_dbl, 2},
    {"_hutilscpp_do_pmin0_int", (DL_FUNC) &_hutilscpp_do_pmin0_int, 2},
    {"_hutilscpp_do_pminV_dbl", (DL_FUNC) &_hutilscpp_do_pminV_dbl, 3},
    {"_hutilscpp_do_pminV_int", (DL_FUNC) &_hutilscpp_do_pminV_int, 3},
    {"_hutilscpp_seqN", (DL_FUNC) &_hutilscpp_seqN, 3},
    {"_hutilscpp_squishn", (DL_FUNC) &_hutilscpp_squishn, 4},
    {"_hutilscpp_squishi", (DL_FUNC) &_hutilscpp_squishi, 4},
    {"_hutilscpp_sum_isna_int", (DL_FUNC) &_hutilscpp_sum_isna_int, 1},
    {"_hutilscpp_sum_isna_dbl", (DL_FUNC) &_hutilscpp_sum_isna_dbl, 1},
    {"_hutilscpp_sum_isna_complx", (DL_FUNC) &_hutilscpp_sum_isna_complx, 1},
    {"_hutilscpp_sum_isna_char", (DL_FUNC) &_hutilscpp_sum_isna_char, 1},
    {"_hutilscpp_sum_isfalse", (DL_FUNC) &_hutilscpp_sum_isfalse, 1},
    {"_hutilscpp_sum_isna_logi", (DL_FUNC) &_hutilscpp_sum_isna_logi, 1},
    {"_hutilscpp_do_summary3_dbl", (DL_FUNC) &_hutilscpp_do_summary3_dbl, 5},
    {"_hutilscpp_do_summary3_int", (DL_FUNC) &_hutilscpp_do_summary3_int, 5},
    {"_hutilscpp_extractMandatory", (DL_FUNC) &_hutilscpp_extractMandatory, 3},
    {"_hutilscpp_do_which_true_onwards", (DL_FUNC) &_hutilscpp_do_which_true_onwards, 1},
    {"do_c_pmax",               (DL_FUNC) &do_c_pmax,               3},
    {NULL, NULL, 0}
};

RcppExport void R_init_hutilscpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
