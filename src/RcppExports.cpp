// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// do_and3_par
LogicalVector do_and3_par(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, LogicalVector A, LogicalVector B, LogicalVector C, CharacterVector nom, int nThread);
RcppExport SEXP _hutilscpp_do_and3_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP nomSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nom(nomSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_and3_par(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, A, B, C, nom, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_sum3s_par
R_xlen_t do_sum3s_par(IntegerVector x, int ox, int x1, int x2, DoubleVector xd, double xd1, double xd2, IntegerVector y, int oy, int y1, int y2, DoubleVector yd, double yd1, double yd2, IntegerVector z, int oz, int z1, int z2, DoubleVector zd, double zd1, double zd2, LogicalVector A, LogicalVector B, LogicalVector C, bool ampersand, int nThread);
RcppExport SEXP _hutilscpp_do_sum3s_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP xdSEXP, SEXP xd1SEXP, SEXP xd2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP ydSEXP, SEXP yd1SEXP, SEXP yd2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP zdSEXP, SEXP zd1SEXP, SEXP zd2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP ampersandSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type xd(xdSEXP);
    Rcpp::traits::input_parameter< double >::type xd1(xd1SEXP);
    Rcpp::traits::input_parameter< double >::type xd2(xd2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type yd(ydSEXP);
    Rcpp::traits::input_parameter< double >::type yd1(yd1SEXP);
    Rcpp::traits::input_parameter< double >::type yd2(yd2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type zd(zdSEXP);
    Rcpp::traits::input_parameter< double >::type zd1(zd1SEXP);
    Rcpp::traits::input_parameter< double >::type zd2(zd2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< bool >::type ampersand(ampersandSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_sum3s_par(x, ox, x1, x2, xd, xd1, xd2, y, oy, y1, y2, yd, yd1, yd2, z, oz, z1, z2, zd, zd1, zd2, A, B, C, ampersand, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_which_in
IntegerVector do_which_in(IntegerVector x, IntegerVector tbl);
RcppExport SEXP _hutilscpp_do_which_in(SEXP xSEXP, SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tbl(tblSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_in(x, tbl));
    return rcpp_result_gen;
END_RCPP
}
// test_intersect3_stdint
bool test_intersect3_stdint(int M);
RcppExport SEXP _hutilscpp_test_intersect3_stdint(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(test_intersect3_stdint(M));
    return rcpp_result_gen;
END_RCPP
}
// do_par_in
LogicalVector do_par_in(IntegerVector x, IntegerVector table, int nThread);
RcppExport SEXP _hutilscpp_do_par_in(SEXP xSEXP, SEXP tableSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_par_in(x, table, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_par_in_hash_int
LogicalVector do_par_in_hash_int(IntegerVector x, IntegerVector table, int nThread);
RcppExport SEXP _hutilscpp_do_par_in_hash_int(SEXP xSEXP, SEXP tableSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_par_in_hash_int(x, table, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_par_in_hash_dbl
LogicalVector do_par_in_hash_dbl(DoubleVector x, DoubleVector table, int nThread);
RcppExport SEXP _hutilscpp_do_par_in_hash_dbl(SEXP xSEXP, SEXP tableSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_par_in_hash_dbl(x, table, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_or3_par
LogicalVector do_or3_par(IntegerVector x, int ox, int x1, int x2, IntegerVector y, int oy, int y1, int y2, IntegerVector z, int oz, int z1, int z2, LogicalVector A, LogicalVector B, LogicalVector C, CharacterVector nom, int nThread);
RcppExport SEXP _hutilscpp_do_or3_par(SEXP xSEXP, SEXP oxSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP ySEXP, SEXP oySEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP zSEXP, SEXP ozSEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP nomSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ox(oxSEXP);
    Rcpp::traits::input_parameter< int >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< int >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type oy(oySEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type oz(ozSEXP);
    Rcpp::traits::input_parameter< int >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< int >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nom(nomSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_or3_par(x, ox, x1, x2, y, oy, y1, y2, z, oz, z1, z2, A, B, C, nom, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_xi_ini
R_xlen_t do_which_first_xi_ini(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_which_first_xi_ini(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_xi_ini(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dblTable2int
IntegerVector dblTable2int(DoubleVector table);
RcppExport SEXP _hutilscpp_dblTable2int(SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(dblTable2int(table));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_xi_ind
R_xlen_t do_which_first_xi_ind(IntegerVector x, DoubleVector yd);
RcppExport SEXP _hutilscpp_do_which_first_xi_ind(SEXP xSEXP, SEXP ydSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type yd(ydSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_xi_ind(x, yd));
    return rcpp_result_gen;
END_RCPP
}
// do_which_first_xd_ind
R_xlen_t do_which_first_xd_ind(DoubleVector x, DoubleVector y, bool y_has_na);
RcppExport SEXP _hutilscpp_do_which_first_xd_ind(SEXP xSEXP, SEXP ySEXP, SEXP y_has_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type y_has_na(y_has_naSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_first_xd_ind(x, y, y_has_na));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_xi_ini
R_xlen_t do_which_last_xi_ini(IntegerVector x, IntegerVector y);
RcppExport SEXP _hutilscpp_do_which_last_xi_ini(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_xi_ini(x, y));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_xi_ind
R_xlen_t do_which_last_xi_ind(IntegerVector x, DoubleVector yd);
RcppExport SEXP _hutilscpp_do_which_last_xi_ind(SEXP xSEXP, SEXP ydSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type yd(ydSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_xi_ind(x, yd));
    return rcpp_result_gen;
END_RCPP
}
// do_which_last_xd_ind
R_xlen_t do_which_last_xd_ind(DoubleVector x, DoubleVector y, bool y_has_na);
RcppExport SEXP _hutilscpp_do_which_last_xd_ind(SEXP xSEXP, SEXP ySEXP, SEXP y_has_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type y_has_na(y_has_naSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_last_xd_ind(x, y, y_has_na));
    return rcpp_result_gen;
END_RCPP
}
// showValue
void showValue(const char* what, double x);
RcppExport SEXP _hutilscpp_showValue(SEXP whatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type what(whatSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    showValue(what, x);
    return R_NilValue;
END_RCPP
}
// haversine_distance
double haversine_distance(double olat1, double olon1, double olat2, double olon2, bool unitless);
RcppExport SEXP _hutilscpp_haversine_distance(SEXP olat1SEXP, SEXP olon1SEXP, SEXP olat2SEXP, SEXP olon2SEXP, SEXP unitlessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type olat1(olat1SEXP);
    Rcpp::traits::input_parameter< double >::type olon1(olon1SEXP);
    Rcpp::traits::input_parameter< double >::type olat2(olat2SEXP);
    Rcpp::traits::input_parameter< double >::type olon2(olon2SEXP);
    Rcpp::traits::input_parameter< bool >::type unitless(unitlessSEXP);
    rcpp_result_gen = Rcpp::wrap(haversine_distance(olat1, olon1, olat2, olon2, unitless));
    return rcpp_result_gen;
END_RCPP
}
// haversineDistance
NumericVector haversineDistance(NumericVector lat1, NumericVector lon1, NumericVector lat2, NumericVector lon2, bool unitless);
RcppExport SEXP _hutilscpp_haversineDistance(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP, SEXP unitlessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< bool >::type unitless(unitlessSEXP);
    rcpp_result_gen = Rcpp::wrap(haversineDistance(lat1, lon1, lat2, lon2, unitless));
    return rcpp_result_gen;
END_RCPP
}
// theEuclidDistance
NumericVector theEuclidDistance(NumericVector x1, NumericVector x2, NumericVector y1, NumericVector y2, bool unitless);
RcppExport SEXP _hutilscpp_theEuclidDistance(SEXP x1SEXP, SEXP x2SEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP unitlessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< bool >::type unitless(unitlessSEXP);
    rcpp_result_gen = Rcpp::wrap(theEuclidDistance(x1, x2, y1, y2, unitless));
    return rcpp_result_gen;
END_RCPP
}
// hausdorffEuclid
double hausdorffEuclid(NumericVector x, NumericVector y);
RcppExport SEXP _hutilscpp_hausdorffEuclid(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(hausdorffEuclid(x, y));
    return rcpp_result_gen;
END_RCPP
}
// EmptiestQuarter
IntegerVector EmptiestQuarter(NumericVector x, NumericVector y, double minx, double maxx, double miny, double maxy);
RcppExport SEXP _hutilscpp_EmptiestQuarter(SEXP xSEXP, SEXP ySEXP, SEXP minxSEXP, SEXP maxxSEXP, SEXP minySEXP, SEXP maxySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type minx(minxSEXP);
    Rcpp::traits::input_parameter< double >::type maxx(maxxSEXP);
    Rcpp::traits::input_parameter< double >::type miny(minySEXP);
    Rcpp::traits::input_parameter< double >::type maxy(maxySEXP);
    rcpp_result_gen = Rcpp::wrap(EmptiestQuarter(x, y, minx, maxx, miny, maxy));
    return rcpp_result_gen;
END_RCPP
}
// theEmptiestQuarters
IntegerVector theEmptiestQuarters(NumericVector x, NumericVector y, double minx, double maxx, double miny, double maxy, int depth);
RcppExport SEXP _hutilscpp_theEmptiestQuarters(SEXP xSEXP, SEXP ySEXP, SEXP minxSEXP, SEXP maxxSEXP, SEXP minySEXP, SEXP maxySEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type minx(minxSEXP);
    Rcpp::traits::input_parameter< double >::type maxx(maxxSEXP);
    Rcpp::traits::input_parameter< double >::type miny(minySEXP);
    Rcpp::traits::input_parameter< double >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(theEmptiestQuarters(x, y, minx, maxx, miny, maxy, depth));
    return rcpp_result_gen;
END_RCPP
}
// which_min_HaversineDistance
int which_min_HaversineDistance(NumericVector lat1, NumericVector lon1, double lat2, double lon2, double upperBound);
RcppExport SEXP _hutilscpp_which_min_HaversineDistance(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP, SEXP upperBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< double >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< double >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< double >::type upperBound(upperBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(which_min_HaversineDistance(lat1, lon1, lat2, lon2, upperBound));
    return rcpp_result_gen;
END_RCPP
}
// match_min_Haversine
List match_min_Haversine(NumericVector lat1, NumericVector lon1, NumericVector lat2, NumericVector lon2, IntegerVector tabl, double cartR, double dist0_km, bool verify_cartR, bool do_verify_box, bool excl_self, int ncores);
RcppExport SEXP _hutilscpp_match_min_Haversine(SEXP lat1SEXP, SEXP lon1SEXP, SEXP lat2SEXP, SEXP lon2SEXP, SEXP tablSEXP, SEXP cartRSEXP, SEXP dist0_kmSEXP, SEXP verify_cartRSEXP, SEXP do_verify_boxSEXP, SEXP excl_selfSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat2(lat2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tabl(tablSEXP);
    Rcpp::traits::input_parameter< double >::type cartR(cartRSEXP);
    Rcpp::traits::input_parameter< double >::type dist0_km(dist0_kmSEXP);
    Rcpp::traits::input_parameter< bool >::type verify_cartR(verify_cartRSEXP);
    Rcpp::traits::input_parameter< bool >::type do_verify_box(do_verify_boxSEXP);
    Rcpp::traits::input_parameter< bool >::type excl_self(excl_selfSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(match_min_Haversine(lat1, lon1, lat2, lon2, tabl, cartR, dist0_km, verify_cartR, do_verify_box, excl_self, ncores));
    return rcpp_result_gen;
END_RCPP
}
// do_or3
LogicalVector do_or3(LogicalVector x, LogicalVector y, LogicalVector z);
RcppExport SEXP _hutilscpp_do_or3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(do_or3(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// do_and3
LogicalVector do_and3(LogicalVector x, LogicalVector y, LogicalVector z);
RcppExport SEXP _hutilscpp_do_and3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(do_and3(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// na_and
LogicalVector na_and(LogicalVector x);
RcppExport SEXP _hutilscpp_na_and(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(na_and(x));
    return rcpp_result_gen;
END_RCPP
}
// do_which3
List do_which3(LogicalVector x, LogicalVector y, LogicalVector z, bool And, bool anyNAx, bool anyNAy, bool anyNAz);
RcppExport SEXP _hutilscpp_do_which3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP AndSEXP, SEXP anyNAxSEXP, SEXP anyNAySEXP, SEXP anyNAzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type And(AndSEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAx(anyNAxSEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAy(anyNAySEXP);
    Rcpp::traits::input_parameter< bool >::type anyNAz(anyNAzSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which3(x, y, z, And, anyNAx, anyNAy, anyNAz));
    return rcpp_result_gen;
END_RCPP
}
// do_which3_mem
IntegerVector do_which3_mem(LogicalVector x, LogicalVector y, LogicalVector z, bool And);
RcppExport SEXP _hutilscpp_do_which3_mem(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP AndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type And(AndSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which3_mem(x, y, z, And));
    return rcpp_result_gen;
END_RCPP
}
// has_openmp
bool has_openmp();
RcppExport SEXP _hutilscpp_has_openmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(has_openmp());
    return rcpp_result_gen;
END_RCPP
}
// diagnose_omp
List diagnose_omp(int threads_requested, String msg_no_openmp, String msg_threads_neg, String msg_unknown_issues, String msg_too_many_threads);
RcppExport SEXP _hutilscpp_diagnose_omp(SEXP threads_requestedSEXP, SEXP msg_no_openmpSEXP, SEXP msg_threads_negSEXP, SEXP msg_unknown_issuesSEXP, SEXP msg_too_many_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type threads_requested(threads_requestedSEXP);
    Rcpp::traits::input_parameter< String >::type msg_no_openmp(msg_no_openmpSEXP);
    Rcpp::traits::input_parameter< String >::type msg_threads_neg(msg_threads_negSEXP);
    Rcpp::traits::input_parameter< String >::type msg_unknown_issues(msg_unknown_issuesSEXP);
    Rcpp::traits::input_parameter< String >::type msg_too_many_threads(msg_too_many_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(diagnose_omp(threads_requested, msg_no_openmp, msg_threads_neg, msg_unknown_issues, msg_too_many_threads));
    return rcpp_result_gen;
END_RCPP
}
// do_summary3_dbl
DoubleVector do_summary3_dbl(DoubleVector x, DoubleVector y, DoubleVector z, bool in_place, bool do_max);
RcppExport SEXP _hutilscpp_do_summary3_dbl(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP in_placeSEXP, SEXP do_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    Rcpp::traits::input_parameter< bool >::type do_max(do_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_summary3_dbl(x, y, z, in_place, do_max));
    return rcpp_result_gen;
END_RCPP
}
// do_summary3_int
IntegerVector do_summary3_int(IntegerVector x, IntegerVector y, IntegerVector z, bool in_place, bool do_max);
RcppExport SEXP _hutilscpp_do_summary3_int(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP in_placeSEXP, SEXP do_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type in_place(in_placeSEXP);
    Rcpp::traits::input_parameter< bool >::type do_max(do_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(do_summary3_int(x, y, z, in_place, do_max));
    return rcpp_result_gen;
END_RCPP
}
// test_single_ox_x1_x2
bool test_single_ox_x1_x2(SEXP x, int op, SEXP x1, SEXP x2);
RcppExport SEXP _hutilscpp_test_single_ox_x1_x2(SEXP xSEXP, SEXP opSEXP, SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type op(opSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_single_ox_x1_x2(x, op, x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// validate_nchar1
int validate_nchar1(CharacterVector x, bool return_size);
RcppExport SEXP _hutilscpp_validate_nchar1(SEXP xSEXP, SEXP return_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type return_size(return_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_nchar1(x, return_size));
    return rcpp_result_gen;
END_RCPP
}
// max_charsize
int max_charsize(CharacterVector x);
RcppExport SEXP _hutilscpp_max_charsize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(max_charsize(x));
    return rcpp_result_gen;
END_RCPP
}
// is_space
bool is_space(CharacterVector x);
RcppExport SEXP _hutilscpp_is_space(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_space(x));
    return rcpp_result_gen;
END_RCPP
}
// where_square_bracket_opens
R_xlen_t where_square_bracket_opens(CharacterVector x, R_xlen_t i);
RcppExport SEXP _hutilscpp_where_square_bracket_opens(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(where_square_bracket_opens(x, i));
    return rcpp_result_gen;
END_RCPP
}
// extractMandatory
List extractMandatory(CharacterVector x, CharacterVector command, int nCommands);
RcppExport SEXP _hutilscpp_extractMandatory(SEXP xSEXP, SEXP commandSEXP, SEXP nCommandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type command(commandSEXP);
    Rcpp::traits::input_parameter< int >::type nCommands(nCommandsSEXP);
    rcpp_result_gen = Rcpp::wrap(extractMandatory(x, command, nCommands));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP Callocate_with_root(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Callocate0_dbl(SEXP, SEXP);
RcppExport SEXP Callocate0_except(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Callocate0_int(SEXP, SEXP);
RcppExport SEXP CAnyCharMatch(SEXP, SEXP, SEXP);
RcppExport SEXP CanyOutside(SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Ccount_logical(SEXP, SEXP);
RcppExport SEXP Ccumsum_reset(SEXP, SEXP);
RcppExport SEXP Ccumsum_reset_sorted_int(SEXP);
RcppExport SEXP Ccumsum_reset_where(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cdivisible(SEXP, SEXP, SEXP);
RcppExport SEXP Cdivisible16(SEXP, SEXP);
RcppExport SEXP Cdivisible2(SEXP, SEXP, SEXP);
RcppExport SEXP CfirstNonNegativeRadix(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cforce_as_integer(SEXP, SEXP);
RcppExport SEXP CImplies(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cis_altrep(SEXP);
RcppExport SEXP Cis_constant(SEXP, SEXP);
RcppExport SEXP Cis_safe2int(SEXP);
RcppExport SEXP Cis_sorted(SEXP, SEXP);
RcppExport SEXP Cisnt_constant(SEXP);
RcppExport SEXP Cisnt_sorted(SEXP, SEXP);
RcppExport SEXP Cpmax(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cpmax0_bitwise(SEXP, SEXP, SEXP);
RcppExport SEXP Cpmax0_radix_sorted_dbl(SEXP, SEXP, SEXP);
RcppExport SEXP Cpmax0_radix_sorted_int(SEXP, SEXP, SEXP);
RcppExport SEXP CpmaxC_in_place(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cpmin(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cpmin0_bitwise(SEXP, SEXP, SEXP);
RcppExport SEXP Cpmin0_radix_sorted_dbl(SEXP, SEXP, SEXP);
RcppExport SEXP Cpmin0_radix_sorted_int(SEXP, SEXP, SEXP);
RcppExport SEXP CpminC_in_place(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Crange(SEXP);
RcppExport SEXP CSquish(SEXP, SEXP);
RcppExport SEXP CStringEqual(SEXP, SEXP);
RcppExport SEXP Csum_isna(SEXP, SEXP);
RcppExport SEXP Cwhich_16(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_even(SEXP);
RcppExport SEXP Cwhich_first(SEXP);
RcppExport SEXP Cwhich_first__(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_first_false(SEXP);
RcppExport SEXP Cwhich_first_in_lgl(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_first_lgl_lgl_op(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_first_notTRUE(SEXP);
RcppExport SEXP Cwhich_firstNA(SEXP);
RcppExport SEXP Cwhich_isna(SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_isnt_integerish(SEXP);
RcppExport SEXP Cwhich_last(SEXP);
RcppExport SEXP Cwhich_last__(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_last_false(SEXP);
RcppExport SEXP Cwhich_last_in_lgl(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP Cwhich_last_notFALSE(SEXP);
RcppExport SEXP Cwhich_last_notTRUE(SEXP);
RcppExport SEXP Cwhich_lastNA(SEXP);
RcppExport SEXP Cwhich_true_onwards(SEXP);
RcppExport SEXP fmatch(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_hutilscpp_do_and3_par", (DL_FUNC) &_hutilscpp_do_and3_par, 17},
    {"_hutilscpp_do_sum3s_par", (DL_FUNC) &_hutilscpp_do_sum3s_par, 26},
    {"_hutilscpp_do_which_in", (DL_FUNC) &_hutilscpp_do_which_in, 2},
    {"_hutilscpp_test_intersect3_stdint", (DL_FUNC) &_hutilscpp_test_intersect3_stdint, 1},
    {"_hutilscpp_do_par_in", (DL_FUNC) &_hutilscpp_do_par_in, 3},
    {"_hutilscpp_do_par_in_hash_int", (DL_FUNC) &_hutilscpp_do_par_in_hash_int, 3},
    {"_hutilscpp_do_par_in_hash_dbl", (DL_FUNC) &_hutilscpp_do_par_in_hash_dbl, 3},
    {"_hutilscpp_do_or3_par", (DL_FUNC) &_hutilscpp_do_or3_par, 17},
    {"_hutilscpp_do_which_first_xi_ini", (DL_FUNC) &_hutilscpp_do_which_first_xi_ini, 2},
    {"_hutilscpp_dblTable2int", (DL_FUNC) &_hutilscpp_dblTable2int, 1},
    {"_hutilscpp_do_which_first_xi_ind", (DL_FUNC) &_hutilscpp_do_which_first_xi_ind, 2},
    {"_hutilscpp_do_which_first_xd_ind", (DL_FUNC) &_hutilscpp_do_which_first_xd_ind, 3},
    {"_hutilscpp_do_which_last_xi_ini", (DL_FUNC) &_hutilscpp_do_which_last_xi_ini, 2},
    {"_hutilscpp_do_which_last_xi_ind", (DL_FUNC) &_hutilscpp_do_which_last_xi_ind, 2},
    {"_hutilscpp_do_which_last_xd_ind", (DL_FUNC) &_hutilscpp_do_which_last_xd_ind, 3},
    {"_hutilscpp_showValue", (DL_FUNC) &_hutilscpp_showValue, 2},
    {"_hutilscpp_haversine_distance", (DL_FUNC) &_hutilscpp_haversine_distance, 5},
    {"_hutilscpp_haversineDistance", (DL_FUNC) &_hutilscpp_haversineDistance, 5},
    {"_hutilscpp_theEuclidDistance", (DL_FUNC) &_hutilscpp_theEuclidDistance, 5},
    {"_hutilscpp_hausdorffEuclid", (DL_FUNC) &_hutilscpp_hausdorffEuclid, 2},
    {"_hutilscpp_EmptiestQuarter", (DL_FUNC) &_hutilscpp_EmptiestQuarter, 6},
    {"_hutilscpp_theEmptiestQuarters", (DL_FUNC) &_hutilscpp_theEmptiestQuarters, 7},
    {"_hutilscpp_which_min_HaversineDistance", (DL_FUNC) &_hutilscpp_which_min_HaversineDistance, 5},
    {"_hutilscpp_match_min_Haversine", (DL_FUNC) &_hutilscpp_match_min_Haversine, 11},
    {"_hutilscpp_do_or3", (DL_FUNC) &_hutilscpp_do_or3, 3},
    {"_hutilscpp_do_and3", (DL_FUNC) &_hutilscpp_do_and3, 3},
    {"_hutilscpp_na_and", (DL_FUNC) &_hutilscpp_na_and, 1},
    {"_hutilscpp_do_which3", (DL_FUNC) &_hutilscpp_do_which3, 7},
    {"_hutilscpp_do_which3_mem", (DL_FUNC) &_hutilscpp_do_which3_mem, 4},
    {"_hutilscpp_has_openmp", (DL_FUNC) &_hutilscpp_has_openmp, 0},
    {"_hutilscpp_diagnose_omp", (DL_FUNC) &_hutilscpp_diagnose_omp, 5},
    {"_hutilscpp_do_summary3_dbl", (DL_FUNC) &_hutilscpp_do_summary3_dbl, 5},
    {"_hutilscpp_do_summary3_int", (DL_FUNC) &_hutilscpp_do_summary3_int, 5},
    {"_hutilscpp_test_single_ox_x1_x2", (DL_FUNC) &_hutilscpp_test_single_ox_x1_x2, 4},
    {"_hutilscpp_validate_nchar1", (DL_FUNC) &_hutilscpp_validate_nchar1, 2},
    {"_hutilscpp_max_charsize", (DL_FUNC) &_hutilscpp_max_charsize, 1},
    {"_hutilscpp_is_space", (DL_FUNC) &_hutilscpp_is_space, 1},
    {"_hutilscpp_where_square_bracket_opens", (DL_FUNC) &_hutilscpp_where_square_bracket_opens, 2},
    {"_hutilscpp_extractMandatory", (DL_FUNC) &_hutilscpp_extractMandatory, 3},
    {"Callocate_with_root",      (DL_FUNC) &Callocate_with_root,      6},
    {"Callocate0_dbl",           (DL_FUNC) &Callocate0_dbl,           2},
    {"Callocate0_except",        (DL_FUNC) &Callocate0_except,        4},
    {"Callocate0_int",           (DL_FUNC) &Callocate0_int,           2},
    {"CAnyCharMatch",            (DL_FUNC) &CAnyCharMatch,            3},
    {"CanyOutside",              (DL_FUNC) &CanyOutside,              5},
    {"Ccount_logical",           (DL_FUNC) &Ccount_logical,           2},
    {"Ccumsum_reset",            (DL_FUNC) &Ccumsum_reset,            2},
    {"Ccumsum_reset_sorted_int", (DL_FUNC) &Ccumsum_reset_sorted_int, 1},
    {"Ccumsum_reset_where",      (DL_FUNC) &Ccumsum_reset_where,      4},
    {"Cdivisible",               (DL_FUNC) &Cdivisible,               3},
    {"Cdivisible16",             (DL_FUNC) &Cdivisible16,             2},
    {"Cdivisible2",              (DL_FUNC) &Cdivisible2,              3},
    {"CfirstNonNegativeRadix",   (DL_FUNC) &CfirstNonNegativeRadix,   4},
    {"Cforce_as_integer",        (DL_FUNC) &Cforce_as_integer,        2},
    {"CImplies",                 (DL_FUNC) &CImplies,                 4},
    {"Cis_altrep",               (DL_FUNC) &Cis_altrep,               1},
    {"Cis_constant",             (DL_FUNC) &Cis_constant,             2},
    {"Cis_safe2int",             (DL_FUNC) &Cis_safe2int,             1},
    {"Cis_sorted",               (DL_FUNC) &Cis_sorted,               2},
    {"Cisnt_constant",           (DL_FUNC) &Cisnt_constant,           1},
    {"Cisnt_sorted",             (DL_FUNC) &Cisnt_sorted,             2},
    {"Cpmax",                    (DL_FUNC) &Cpmax,                    4},
    {"Cpmax0_bitwise",           (DL_FUNC) &Cpmax0_bitwise,           3},
    {"Cpmax0_radix_sorted_dbl",  (DL_FUNC) &Cpmax0_radix_sorted_dbl,  3},
    {"Cpmax0_radix_sorted_int",  (DL_FUNC) &Cpmax0_radix_sorted_int,  3},
    {"CpmaxC_in_place",          (DL_FUNC) &CpmaxC_in_place,          4},
    {"Cpmin",                    (DL_FUNC) &Cpmin,                    4},
    {"Cpmin0_bitwise",           (DL_FUNC) &Cpmin0_bitwise,           3},
    {"Cpmin0_radix_sorted_dbl",  (DL_FUNC) &Cpmin0_radix_sorted_dbl,  3},
    {"Cpmin0_radix_sorted_int",  (DL_FUNC) &Cpmin0_radix_sorted_int,  3},
    {"CpminC_in_place",          (DL_FUNC) &CpminC_in_place,          4},
    {"Crange",                   (DL_FUNC) &Crange,                   1},
    {"CSquish",                  (DL_FUNC) &CSquish,                  2},
    {"CStringEqual",             (DL_FUNC) &CStringEqual,             2},
    {"Csum_isna",                (DL_FUNC) &Csum_isna,                2},
    {"Cwhich_16",                (DL_FUNC) &Cwhich_16,                4},
    {"Cwhich_even",              (DL_FUNC) &Cwhich_even,              1},
    {"Cwhich_first",             (DL_FUNC) &Cwhich_first,             1},
    {"Cwhich_first__",           (DL_FUNC) &Cwhich_first__,           8},
    {"Cwhich_first_false",       (DL_FUNC) &Cwhich_first_false,       1},
    {"Cwhich_first_in_lgl",      (DL_FUNC) &Cwhich_first_in_lgl,      4},
    {"Cwhich_first_lgl_lgl_op",  (DL_FUNC) &Cwhich_first_lgl_lgl_op,  4},
    {"Cwhich_first_notTRUE",     (DL_FUNC) &Cwhich_first_notTRUE,     1},
    {"Cwhich_firstNA",           (DL_FUNC) &Cwhich_firstNA,           1},
    {"Cwhich_isna",              (DL_FUNC) &Cwhich_isna,              3},
    {"Cwhich_isnt_integerish",   (DL_FUNC) &Cwhich_isnt_integerish,   1},
    {"Cwhich_last",              (DL_FUNC) &Cwhich_last,              1},
    {"Cwhich_last__",            (DL_FUNC) &Cwhich_last__,            8},
    {"Cwhich_last_false",        (DL_FUNC) &Cwhich_last_false,        1},
    {"Cwhich_last_in_lgl",       (DL_FUNC) &Cwhich_last_in_lgl,       4},
    {"Cwhich_last_notFALSE",     (DL_FUNC) &Cwhich_last_notFALSE,     1},
    {"Cwhich_last_notTRUE",      (DL_FUNC) &Cwhich_last_notTRUE,      1},
    {"Cwhich_lastNA",            (DL_FUNC) &Cwhich_lastNA,            1},
    {"Cwhich_true_onwards",      (DL_FUNC) &Cwhich_true_onwards,      1},
    {"fmatch",                   (DL_FUNC) &fmatch,                   6},
    {NULL, NULL, 0}
};

RcppExport void R_init_hutilscpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
